Graph = [[9, 70], [96, 75], [94, 0], [91, 76], [52, 56], [32, 72], [11, 40], [34, 65], [80, 85], [99, 37], [57, 94], [1, 58], [35, 34], [89, 11], [52, 38], [92, 0], [30, 34], [24, 68], [37, 91], [70, 58], [49, 43], [18, 35], [75, 51], [84, 45], [1, 53], [89, 66], [58, 22], [44, 85], [62, 94], [23, 21], [75, 71], [65, 26], [86, 18], [22, 27], [58, 95], [88, 89], [97, 77], [31, 57], [37, 18], [21, 39], [21, 63], [24, 64], [44, 26], [12, 93], [14, 3], [2, 24], [66, 69], [84, 72], [23, 39], [28, 11], [65, 0], [46, 12], [41, 49], [33, 64], [72, 45], [56, 26], [29, 49], [11, 43], [40, 100], [38, 16], [82, 39], [36, 82], [67, 7], [76, 57], [63, 92], [8, 99], [29, 91], [10, 87], [90, 9], [98, 23], [66, 6], [23, 38], [31, 15], [81, 70], [85, 87], [35, 93], [40, 29], [31, 13], [67, 70], [5, 78], [55, 7], [40, 60], [2, 25], [29, 74], [53, 13], [75, 65], [98, 12], [21, 44], [15, 96], [37, 82], [67, 25], [75, 90], [46, 82], [68, 84], [4, 90], [71, 90], [48, 54], [14, 36], [32, 69], [36, 67]]
def add_edge(initial_node, connect_node): # функция добавления ребра в граф
    Graph.append([initial_node, connect_node])

def check_link(a, b, graph):
    start = a # начальный узел
    end = b # конечный узел
    position = start # текущий узел
    path = list() # путь продвижения
    while position != end:
        for i in graph:
            if position in i:
                path.append(position)
                graph.remove(i)
                if end in i:
                    return True, path
                i.remove(position)
                position = int(i[0]) 
            elif position not in set(i for l in graph for i in l):
                position = path[-1]
                path.remove(path[-1])
                if path == [] and position not in set(i for l in graph for i in l):
                    return False

    return 0

print(check_link(10, 16, Graph))
